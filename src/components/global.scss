@use 'variables' as *;
@use 'mixins' as *;

:root {
	--font-family-body: sans-serif;
	--font-family-accent: sans-serif;

	@each $name, $values in $colors {
		--color-#{$name}: #{map-get($colors, '#{$name}')};
	}
	@each $name in map-keys($colors) {
		--readable-color-#{$name}: #{if(map-get($hslColors, #{$name}-l) > 60, black, white)};
	}

	--width-wide: #{map-get($widths, 'wide')};
	--width-contained: #{map-get($widths, 'contained')};
	--width-narrow: #{map-get($widths, 'narrow')};
	--width-small: #{map-get($widths, 'small')};

	--spacing-xxs: 0.25rem;
	/* Augmented fourth scale - 1.414 */
	--spacing-xs: 0.5rem;
	--spacing-sm: 0.707rem;
	--spacing-md: 1rem;
	--spacing-lg: 1.414rem;
	--spacing-xl: 2rem; // rounded up from 1.999 for testing performance
	--spacing-xxl: 2.827rem;

	--font-size-sm: 0.875rem;

	--font-weight-light: 300;
	--font-weight-regular: 400;
	--font-weight-semibold: 600;
	--font-weight-bold: 700;

	--button-border-radius: 0;
}

* {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}

body {
	margin: 0;
	padding: 0;
	font-family: var(--font-family-body), sans-serif;
	line-height: 1.4;
}

[data-valign],
[data-halign] {
	display: flex;
}

// Default alignments. Note that components can override with their own stuff that they do with these values,
// for example orientation for Tabs is about where the tablist is.
[data-valign="start"] {
	align-items: flex-start;
}

[data-valign="center"] {
	align-items: center;
}

[data-valign="end"] {
	align-items: flex-end;
}

[data-halign="start"] {
	justify-content: flex-start;
}

[data-halign="center"] {
	justify-content: center;
}

[data-halign="end"] {
	justify-content: flex-end;
}

[data-halign="justify"] {
	justify-content: space-between;
}

[data-orientation="horizontal"] {
	display: flex;
	flex-direction: row;
}

[data-orientation="vertical"] {
	display: flex;
	flex-direction: column;
}

@each $name, $color in $colors {
	[data-color-theme="#{$name}"] {
		// Set a high-level local variable that can be accessed by Vue components, to simplify using vanilla CSS in SFCs
		--theme-color: var(--color-#{$name});
		--theme-text-color: var(--readable-color-#{$name});
	}
}

// Basic theme styling for elements with a text colour attribute specified
@each $name, $color in $colors {
	[data-text-color="#{$name}"] {
		color: var(--color-#{$name});
	}
}

// Basic theme styling for elements with a background colour attribute specified
@each $name, $color in $colors {
	[data-background="#{$name}"] {
		// Apply background colour and default padding if it is different to the global background
		&:not(body[data-global-background="#{$name}"] &) {
			background-color: var(--color-#{$name});
			color: var(--readable-color-#{$name});

			&:not(.page-section) {
				@include nested-padding();
			}
		}

		// Or if it has an ancestor with a different background to itself and to the global background
		@at-root {
			[data-background]:not([data-background="#{$name}"]) & {
				background-color: var(--color-#{$name});
				color: var(--readable-color-#{$name});

				// Reset child elements that match global background
				body[data-global-background="#{$name}"] & [data-background="#{$name}"] {
					background-color: transparent;
					color: inherit;
				}
			}
		}
	}

	// 50/50 gradient backgrounds
	@each $name2, $color2 in $colors {
		[data-background="gradient-#{$name}-#{$name2}"] {
			background: linear-gradient(180deg, var(--color-#{$name}) 0%, var(--color-#{$name}) 50%, var(--color-#{$name2}) 50%, var(--color-#{$name2}) 100%);
		}
	}
}

@each $heading, $i in ('h3': 1, 'h2': 2, 'h1': 3) {
	#{$heading} {
		font-size: $baseFontSize * pow($typeScale, $i);
		line-height: 1.2;

		// Accent font is often a handwriting or other stylised font that looks visually smaller,
		// so this sets a default to account for that
		&.is-style-accent {
			font-size: ($baseFontSize * 1.25) * pow($typeScale, $i);
		}
	}
}

h1 {
	margin-block: var(--spacing-lg);

	&:first-child {
		margin-block-start: 0;
	}
}

h2, h3 {
	margin-block: var(--spacing-md);

	&:first-child {
		margin-block-start: 0;
	}
}

.separator + h2 {
	margin-block-start: 0;
}

p, ul, ol {
	margin-block: var(--spacing-sm);

	&:first-child {
		margin-block-start: 0;
	}

	&:last-child {
		margin-block-end: 0;
	}
}

ul, ol {
	margin-inline-start: var(--spacing-md);

	li {
		margin-block-end: var(--spacing-xxs);
	}
}

a {
	transition: all 0.2s ease-in-out;
	color: inherit;

	&:hover, &:focus, &:active {
		color: var(--color-secondary);
	}
}

.is-style-accent {
	font-family: var(--font-family-accent);
	font-weight: normal;
	line-height: 1;
}

h1, h2, h3 {
	&.is-style-small {
		font-size: 1rem;
		text-transform: uppercase;
	}
}

.is-style-lead {
	font-weight: 600;
	font-size: $baseFontSize * 1.125;

	a {
		color: inherit;

		&:hover, &:focus, &:active {
			color: color-mix(in hsl, currentColor, black 20%);
		}
	}
}

form {
	input[type="text"],
	input[type="email"],
	input[type="password"],
	input[type="search"],
	input[type="tel"],
	input[type="url"],
	input[type="number"],
	select,
	textarea {
		font-size: 1rem;
		padding: var(--spacing-xs) var(--spacing-sm);
		font-family: var(--font-family-body);
	}

	input[type="submit"],
	input[type="button"] {
		font-family: var(--font-family-body);
		font-size: 1rem;
	}
}
