@use 'variables' as *;
@use 'mixins' as *;

:root {
	--font-family-body: sans-serif;
	--font-family-accent: sans-serif;

	@each $name, $values in $colors {
		--color-#{$name}: #{map-get($colors, '#{$name}')};
	}
	@each $name, $value in $hslColors {
		--color-#{$name}: #{$value};
	}
	@each $name in map-keys($colors) {
		--readable-color-#{$name}: #{if(map-get($hslColors, #{$name}-l) > 60, black, white)};
	}

	--width-wide: #{map-get($widths, 'wide')};
	--width-contained: #{map-get($widths, 'contained')};
	--width-narrow: #{map-get($widths, 'narrow')};
	--width-small: #{map-get($widths, 'small')};

	--spacing-xxs: 0.25rem;
	/* Augmented fourth scale - 1.414 */
	--spacing-xs: 0.5rem;
	--spacing-sm: 0.707rem;
	--spacing-md: 1rem;
	--spacing-lg: 1.414rem;
	--spacing-xl: 2rem; // rounded up from 1.999 for testing performance
	--spacing-xxl: 2.827rem;

	--font-size-sm: 0.875rem;

	--font-weight-light: 300;
	--font-weight-regular: 400;
	--font-weight-semibold: 600;
	--font-weight-bold: 700;

	--button-border-radius: 0;
}

* {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}

body {
	margin: 0;
	padding: 0;
	font-family: var(--font-family-body), sans-serif;
	line-height: 1.4;
}

// Default alignments. Note that components can override with their own stuff that they do with these values,
// for example orientation for Tabs is about where the tablist is.
[data-valign="start"] {
	align-items: flex-start;
}

[data-valign="center"] {
	align-items: center;
}

[data-valign="end"] {
	align-items: flex-end;
}

[data-halign="start"] {
	justify-content: flex-start;
}

[data-halign="center"] {
	justify-content: center;
}

[data-halign="end"] {
	justify-content: flex-end;
}

[data-orientation="vertical"] {
	flex-direction: column;

	[data-valign="start"],
	&[data-valign="start"] {
		align-items: flex-start;
	}

	[data-valign="center"],
	&[data-valign="center"] {
		align-items: center;
	}

	[data-valign="end"],
	&[data-valign="end"] {
		align-items: flex-end;
	}

	[data-halign="start"],
	&[data-halign="start"] {
		justify-content: flex-start;
	}

	[data-halign="center"],
	&[data-halign="center"] {
		justify-content: center;
	}

	[data-halign="end"],
	&[data-halign="end"] {
		justify-content: flex-end;
	}
}

[data-background] {
	// Most elements with backgrounds are expected to be nested, so this is a sensible default
	// Putting this in specific components causes specificity issues with the below overrides
	@include nested-padding();
}

.layout-block {
	// If a layout block's immediate child is also a layout block but that has no background set, it should have padding
	&[data-background] > .layout-block:not([data-background]) {
		@include nested-padding();
	}

	// Treat vertically adjacent layout blocks that have no background colour the same as if they had the same solid background
	// (We do not generally expect these to be directly horizontally adjacent - they would need to be within an element that handles that, such as Columns)
	&:not([data-background]) {
		& + & {
			padding-block-start: 0;
		}
	}
}

@each $name, $color in $colors {
	// Basic styling for elements with a text colour attribute specified
	[data-text-color="#{$name}"] {
		color: var(--color-#{$name});
	}

	// Set body background colour and associated default text colour
	body[data-global-background="#{$name}"] {
		background-color: var(--color-#{$name});
		color: var(--readable-color-#{$name});
	}

	// Basic styling for elements with a background colour
	[data-background="#{$name}"] {
		background-color: var(--color-#{$name});
		color: var(--readable-color-#{$name});
	}

	// If an element has a directly nested only child with the same background, that child should not have padding
	[data-background="#{$name}"] > [data-background="#{$name}"]:only-child {
		padding: 0;
	}

	// If this element is a "layout block" type element such as a container, column set, or group,
	// i.e., something expected to take up the full width of its container or the page)
	.layout-block {
		// if its next immediate "layout block" sibling has the same solid background, remove the sibling's top padding so we don't get double padding
		// (they won't always be <section>s so we can't use that to target; nor is there a suitable ARIA attribute or role for this)
		&[data-background="#{$name}"] + &[data-background="#{$name}"] {
			padding-block-start: 0;
		}

		// If its immediate child has the same solid background:
		&[data-background="#{$name}"] {
			// Only child should not have any padding
			> [data-background="#{$name}"]:only-child {
				padding: 0;
			}

			// First child of multiple should only have bottom padding (if any)
			> [data-background="#{$name}"]:first-child:not(:only-child) {
				padding-inline: 0;
				padding-block-start: 0;
			}

			// Last child of multiple should only have top padding (if any)
			> [data-background="#{$name}"]:last-child:not(:only-child) {
				padding-inline: 0;
				padding-block-end: 0;
			}
		}

		// If its immediate child has no background set but the next level child does,
		// and it's the same as this element's background, remove the padding of that third level element
		&[data-background="#{$name}"] > &:not([data-background]) > &[data-background="#{$name}"] {
			padding: 0;
		}
	}

	// 50/50 gradient backgrounds
	@each $name2, $color2 in $colors {
		[data-background="gradient-#{$name}-#{$name2}"] {
			background: linear-gradient(180deg, var(--color-#{$name}) 0%, var(--color-#{$name}) 50%, var(--color-#{$name2}) 50%, var(--color-#{$name2}) 100%);
		}
	}

	// If this element's next immediate sibling has a gradient background with the same top colour, remove its top padding so we don't get double padding
	[data-background="#{$name}"] + [data-background*="gradient-#{$name}"] {
		padding-block-start: 0;
	}

	// If this element has a gradient background and its next immediate sibling has a solid background with the same top colour, remove its top padding so we don't get double padding
	[data-background*="gradient-"][data-background*="-#{$name}"] + [data-background="#{$name}"] {
		padding-block-start: 0;
	}

	// If this element and its immediate sibling both have gradient backgrounds and this element's bottom colour is the same as the sibling's top colour, remove its bottom padding so we don't get double padding
	[data-background*="gradient-#{$name}"] + [data-background*="gradient-#{$name}"] {
		padding-block-start: 0;
	}
}

@each $heading, $i in ('h3': 1, 'h2': 2, 'h1': 3) {
	#{$heading} {
		font-size: $baseFontSize * pow($typeScale, $i);
		line-height: 1.2;

		// Accent font is often a handwriting or other stylised font that looks visually smaller,
		// so this sets a default to account for that
		&.is-style-accent {
			font-size: ($baseFontSize * 1.25) * pow($typeScale, $i);
		}
	}
}

h1 {
	margin-block: var(--spacing-lg);

	&:first-child {
		margin-block-start: 0;
	}
}

h2, h3 {
	margin-block: var(--spacing-md);

	&:first-child {
		margin-block-start: 0;
	}
}

p, ul, ol {
	margin-block: var(--spacing-sm);

	&:first-child {
		margin-block-start: 0;
	}

	&:last-child {
		margin-block-end: 0;
	}
}

ul, ol {
	margin-inline-start: var(--spacing-md);

	li {
		margin-block-end: var(--spacing-xxs);
	}
}

a {
	transition: all 0.2s ease-in-out;
	color: inherit;

	&:hover, &:focus, &:active {
		color: var(--color-secondary);
	}
}

.is-style-accent {
	font-family: var(--font-family-accent);
	font-weight: normal;
	line-height: 1;
}

h1, h2, h3 {
	&.is-style-small {
		font-size: 1rem;
		text-transform: uppercase;
	}
}

.is-style-lead {
	font-weight: 600;
	font-size: $baseFontSize * 1.125;

	a {
		color: inherit;

		&:hover, &:focus, &:active {
			color: color-mix(in hsl, currentColor, black 20%);
		}
	}
}

form {
	input[type="text"],
	input[type="email"],
	input[type="password"],
	input[type="search"],
	input[type="tel"],
	input[type="url"],
	input[type="number"],
	select,
	textarea {
		font-size: 1rem;
		padding: var(--spacing-xs) var(--spacing-sm);
		font-family: var(--font-family-body);
	}

	input[type="submit"],
	input[type="button"] {
		font-family: var(--font-family-body);
		font-size: 1rem;
	}
}
