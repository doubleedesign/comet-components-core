@use '../mixins' as *;
@use '../variables' as *;

@mixin stack-columns-until($breakpointName) {
	@include container-width-down($breakpointName) {
		flex-wrap: wrap;

		.column {
			grid-column: 1 / -1;
			width: 100% !important;
			flex-basis: 100% !important;
			min-width: 100%;
		}
	}
}

.columns {
	// Default/auto layout
	display: grid;
	grid-gap: var(--spacing-md);

	@include container-width-up('narrow') {
		grid-gap: var(--spacing-lg);
	}

	&[data-count="2"], &[data-count="4"], &[data-count="6"] {
		&[data-allow-layout-stacking="true"] {
			grid-template-columns: repeat(1, 1fr);
			@include stack-columns-until('small');

			@include container-width-up('small') {
				grid-template-columns: repeat(2, 1fr);
			}
		}
	}

	&[data-count="4"] {
		&[data-allow-layout-stacking="true"] {
			@include container-width-up('narrow') {
				grid-template-columns: repeat(4, 1fr);
			}
		}
	}

	&[data-count="3"], &[data-count="6"] {
		&[data-allow-layout-stacking="true"] {
			@include container-width-up('narrower') {
				grid-template-columns: repeat(3, 1fr);
			}
		}
	}

	&[data-count="5"] {
		&[data-allow-layout-stacking="true"] {
			@include container-width-up('narrow') {
				grid-template-columns: repeat(5, 1fr);
			}
		}
	}

	&[data-count="6"] {
		&[data-allow-layout-stacking="true"] {
			@include container-width-up('narrow') {
				grid-template-columns: repeat(5, 1fr);
			}
		}
	}

	// Adjust layout if any of the columns has a preset width
	&:has(> .columns__column--has-own-width) {
		display: flex;
		gap: var(--spacing-md);

		@include container-width-up('narrow') {
			gap: var(--spacing-lg);
		}
	}

	// If this element has at least one child with a different background colour set, all children should have padding so they align
	@each $color, $value in $colors {
		&[data-background="#{$color}"] {
			// Has any direct child with a different background
			@each $color2, $value in $colors {
				@if $color != $color2 {
					&:has(> [data-background="#{$color2}"]) {
						.columns__column {
							@include nested-padding();
						}
					}
				}
			}

			// Has adjacent sibling with same background - negate the container gap
			& + & {
				margin-block-start: calc(var(--spacing-md) * -2);
			}
		}
	}

	// If this element doesn't have a background set, and there are any direct children with one,
	// then all children should have padding so they align
	&:not([data-background]) {
		&:has(> [data-background]) {
			.columns__column {
				@include nested-padding();
			}
		}
	}
}
